#include <WiFi.h>
#include <time.h>
#include <TFT_eSPI.h>
#include "clock_face.h"

TFT_eSPI tft = TFT_eSPI();

#define CENTER_X 120
#define CENTER_Y 120
#define RADIUS 100
#define DOT_RADIUS 2
#define TRACK_RADIUS 110

// Wi-Fi и время
const char* ssid = "Co-vid";
const char* password = "zadolbala";
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 3 * 3600;  // для Украины GMT+3
const int daylightOffset_sec = 0;     // нет перехода на летнее время

uint8_t h = 0, m = 0, s = 0, last_s = 0;
int last_hx = 0, last_hy = 0;
int last_mx = 0, last_my = 0;
int last_sx = 0, last_sy = 0;

void setup() {
  Serial.begin(115200);
  tft.init();
  tft.setRotation(2);
  tft.pushImage(0, 0, 240, 240, clock_face);

  connectToWiFi();
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  // Подождём синхронизации времени
  struct tm timeinfo;
  while (!getLocalTime(&timeinfo)) {
    Serial.println("Ожидание времени...");
    delay(500);
  }

  Serial.println("Время получено из NTP!");
  delay(500);
  updateLocalTime();  // установить h, m, s
  updateClock();
}

void loop() {
  updateLocalTime();
  updateClock();
  delay(1000);
}

void connectToWiFi() {
  Serial.printf("Подключение к Wi-Fi: %s\n", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi подключено");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void updateLocalTime() {
  struct tm timeinfo;
  if (getLocalTime(&timeinfo)) {
    h = timeinfo.tm_hour;
    m = timeinfo.tm_min;
    s = timeinfo.tm_sec;
  }
}

void updateClock() {
  uint16_t bgColor = clock_face[CENTER_Y * 240 + CENTER_X];

  tft.drawLine(CENTER_X, CENTER_Y, last_hx, last_hy, bgColor);
  tft.drawLine(CENTER_X, CENTER_Y, last_mx, last_my, bgColor);
  tft.drawLine(CENTER_X, CENTER_Y, last_sx, last_sy, bgColor);

  int dotX = CENTER_X + TRACK_RADIUS * sin(last_s * PI / 30);
  int dotY = CENTER_Y - TRACK_RADIUS * cos(last_s * PI / 30);
  if (dotX >= 0 && dotX < 240 && dotY >= 0 && dotY < 240) {
    drawDotAtSecond(last_s, clock_face[dotY * 240 + dotX]);
  }

  float hourAngle = (h % 12 + m / 60.0) * PI / 6;
  last_hx = CENTER_X + RADIUS * 0.5 * sin(hourAngle);
  last_hy = CENTER_Y - RADIUS * 0.5 * cos(hourAngle);
  tft.drawLine(CENTER_X, CENTER_Y, last_hx, last_hy, TFT_WHITE);

  float minAngle = m * PI / 30;
  last_mx = CENTER_X + RADIUS * 0.7 * sin(minAngle);
  last_my = CENTER_Y - RADIUS * 0.7 * cos(minAngle);
  tft.drawLine(CENTER_X, CENTER_Y, last_mx, last_my, TFT_WHITE);

  float secAngle = s * PI / 30;
  last_sx = CENTER_X + RADIUS * 0.9 * sin(secAngle);
  last_sy = CENTER_Y - RADIUS * 0.9 * cos(secAngle);
  tft.drawLine(CENTER_X, CENTER_Y, last_sx, last_sy, TFT_RED);

  drawDotAtSecond(s, TFT_RED);
  last_s = s;
}

void drawDotAtSecond(uint8_t sec, uint16_t color) {
  float angle = sec * PI / 30;
  int dx = CENTER_X + TRACK_RADIUS * sin(angle);
  int dy = CENTER_Y - TRACK_RADIUS * cos(angle);
  tft.fillCircle(dx, dy, DOT_RADIUS, color);
}
